{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "company":{
            "type": "string",
            "defaultValue": "XXX",
            "metadata": {
                "description": "Used for creating random strings where unique names are required."
            }
        },
        "environment": {
           "type": "string",
            "metadata": {
                "description": "Prod, Dev, Test, PoC, and Demo"
            },
            "defaultValue": "Demo"
        },
        "kvUsage": {
            "type": "string",
            "metadata": {
                "description": "Application or service e.g. APP1 or ARM"
            },
            "defaultValue": ""
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "The location of the resource; inherits the resource group configuration."
            }
        },
        "sku": {
            "type": "string",
            "allowedValues": [
                "Standard",
                "Premium"
            ],
            "metadata": {
                "description": "A Standard or Premium vault."
            },
            "defaultValue": "Standard"
        },
        "enableSoftDelete": {
            "type": "bool",
            "allowedValues": [
                true,
                false
            ],
            "defaultValue": true,
            "metadata": {
                "description": "Used to set soft delete functionality for the key vault - false is useful for test scenarios"
            }
        },
        "enabledForDeployment": {
            "type": "bool",
            "metadata":{
                "desciption": "Specifies whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault."
            },
            "defaultValue": false,
            "allowedValues": [
                true,
                false
            ]
        },
        "enabledForTemplateDeployment": {
            "type": "bool",
            "metadata": {
                "description": "Specifies whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
            },
            "defaultValue": false,
            "allowedValues": [
                true,
                false
            ]
        },
        "enabledForDiskEncryption": {
            "type": "bool",
            "metadata": {
                "description": "Specifies whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys."
            },
            "defaultValue": false,
            "allowedValues": [
                true,
                false
            ]
        },
        "enableDiagnosticLogging": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "Should diagnostic logging be enabled - if so requires log analytics workspace."
            }
        },
        "logAnalyticsWorkspace_Id":{
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "The workspace, key vault will use for diagnostic logging"
            }
        },
        "keyVaultAdminGroup":{
            "type": "string",
            "metadata": {
                "description": "the object Id of the Key Vault Admin Group."
            }
        },
        "certificatesOfficerGroup": {
            "type": "string",
            "metadata": {
                "desciption": "the object Id of the certificate officers group."
            }
        }
    },
    "variables": {
        "randomString": "[uniqueString(concat(parameters('company'), parameters('kvUsage'), parameters('location')))]",
        "Name": "[if(greater(length(concat('KV-', toUpper(parameters('environment')), '-', toUpper(variables('randomString')))),24), substring(concat('KV-', toUpper(parameters('environment')), '-', toUpper(variables('randomString'))), 0, 24), concat('KV-', toUpper(parameters('environment')), '-', toUpper(variables('randomString'))))]",
        "resourceTags": {
            "usage": "[parameters('kvUsage')]"
        },
        "keyVault_Id": "[resourceId('Microsoft.KeyVault/vaults', variables('Name'))]",
        "Key Vault Administrator": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefintions/', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
        "Key Vault Certificates Officer": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefintions/', 'a4417e6f-fecd-4de8-b567-7b0420556985')]"
    },
    "resources": [
        {
            "apiVersion": "2019-09-01",
            "name": "[variables('Name')]",
            "location": "[parameters('location')]",
            "type": "Microsoft.KeyVault/vaults",
            "tags": "[variables('resourceTags')]",
            "properties": {
                "enabledForDeployment": "[parameters('enabledForDeployment')]",
                "enabledForTemplateDeployment": "[parameters('enabledForTemplateDeployment')]",
                "enabledForDiskEncryption": "[parameters('enabledForDiskEncryption')]",
                "enableRbacAuthorization": true,
                "enableSoftDelete": "[parameters('enableSoftDelete')]",
                "enablePurgeProtection": "[if(parameters('enableSoftDelete'), bool('true'), json('null'))]",
                "softDeleteRetentionInDays": 7,
                "tenantId": "[subscription().tenantId]",
                "sku": {
                    "name": "[parameters('sku')]",
                    "family": "A"
                },
                "networkAcls": {
                    "defaultAction": "Allow",
                    "bypass": "AzureServices"
                }
            }
        },
        {
            "condition": "[equals(parameters('enableDiagnosticLogging'), 'Yes')]",
            "type": "Microsoft.KeyVault/vaults/providers/diagnosticSettings",
            "name": "[concat(variables('Name'), '/Microsoft.Insights/service')]",
            "apiVersion":"2016-09-01",
            "location":"[resourceGroup().location]",
            "dependsOn":[
                "[variables('keyVault_Id')]"
            ],
            "properties":{
                "workspaceId":"[parameters('logAnalyticsWorkspace_Id')]",
                "logs": [
                    {
                        "category": "AuditEvent",
                        "enabled": true
                    }
                ],
                "metrics": [
                    {
                        "category": "AllMetrics",
                        "enabled": true
                    }
                ]
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/providers/roleAssignments",
            "apiVersion": "2020-04-01-preview",
            "name": "[concat(variables('Name'), '/Microsoft.Authorization/', guid(uniqueString(concat(toUpper(parameters('keyVaultAdminGroup')), variables('Name')))))]",
            "location": "[parameters('location')]",
            "dependsOn":[
                "[variables('keyVault_Id')]"
            ],
            "properties": {
                "roleDefinitionId": "[variables('Key Vault Administrator')]",
                "principalId": "[parameters('keyVaultAdminGroup')]"
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/providers/roleAssignments",
            "apiVersion": "2020-04-01-preview",
            "name": "[concat(variables('Name'), '/Microsoft.Authorization/', guid(uniqueString(concat(toUpper(parameters('certificatesOfficerGroup')), variables('Name')))))]",
            "location": "[parameters('location')]",
            "dependsOn":[
                "[variables('keyVault_Id')]"
            ],
            "properties": {
                "roleDefinitionId": "[variables('Key Vault Certificates Officer')]",
                "principalId": "[parameters('certificatesOfficerGroup')]"
            }
        }
    ],
    "outputs": {
        "keyVault_Id":{
            "type": "string",
            "value": "[variables('keyVault_Id')]"
        },
        "keyVault_Name":{
            "type": "string",
            "value": "[variables('Name')]"
        }
    }
}